# -*- org-confirm-babel-evaluate: nil -*-

#+STARTUP: content
#+OPTIONS: toc:nil

* freer-servant

A fully functional app template for starting a new [[https://hackage.haskell.org/package/servant][servant]] app with
cookie authentication (via [[https://hackage.haskell.org/package/servant-auth][servant-auth]]), persistence via
[[https://hackage.haskell.org/package/postgresql-simple][postgresql-simple]] and [[https://github.com/ameingast/postgresql-simple-migration][postgresql-simple-migration]]. It uses
[[https://hackage.haskell.org/package/freer-simple][freer-simple]] to decompose the API into business logic and wiring.

This is the result of my own Haskell learning experience - reviews,
helpful suggestions & pull requests are welcome!

* Instructions

Prerequisites: Install
[stack](https://docs.haskellstack.org/en/stable/README/) and have a
PostgreSQL database named 'webapp' running on port 5432, without
authentication (see src/App.hs if you require additional
configuration).

** Starting the server

Starting the server using stack:

#+begin_src bash
  stack setup
  stack run
#+end_src

Starting the server using nix:

#+begin_src bash
  nix-shell
  cabal new-run
#+end_src


** Testing the API:

#+begin_src bash
  # create a new user
  curl -X POST -v -H "Content-Type: application/json" -d '{"_credentialsEmail":"user@example.com", "_credentialsPassword":"a password"}' localhost:4000/user
#+end_src

#+begin_src bash
  curl -X POST -b cookies -c cookies -v -H "Content-Type: application/json" -d '{"_credentialsEmail":"user@example.com", "_credentialsPassword":"a password"}' localhost:4000/session
#+end_src
# log in

#+begin_src bash
  # access the protected user endpoint, which returns the user as a JSON object
  # Note that servant-auth uses XSRF protection, so you need to set a header field (it only works once, as the xsrf cookie is renewed after each request
  curl -b cookies -c cookies -v -H "Content-Type: application/json" -H "X-XSRF-TOKEN: <enter xsrf token from cookies file here>" localhost:4000/user
#+end_src

#+begin_src
# log out (doesn't work yet)
curl -X DELETE -b cookies -c cookies -v -H "Content-Type: application/json" localhost:4000/session
#+end_src

#+begin_src bash
  # verify the user endpoint is not accessible anymore
  curl -b cookies -c cookies -v -H "Content-Type: application/json" localhost:4000/user
#+end_src
