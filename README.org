# -*- org-confirm-babel-evaluate: nil -*-

#+STARTUP: content
#+OPTIONS: toc:nil

[[https://travis-ci.org/sboehler/beans.svg?branch=master]]

* beans - A Plain-Text Accounting Tool

** About beans

beans is a [[https://plaintextaccounting][plain text accounting tool]] in the tradition of [[https://www.ledger-cli.org][ledger]],
[[https://hledger.org][hledger]] and [[https://furius.ca/beancount/][beancount]]. I am writing it mostly for the fun of it, but I
have some objectives in mind which distinguish beans from similar
tools:

- Easy importing :: The greatest pain of plain text accounting is to
                    import financial statements from financial service
                    providers such as banks and credit cards. beans
                    strives to include importers for known formats.
- Rule-based categorization :: beans provides a domain-specific
     language (DSL) to specify rules for assigning accounts based on
     transaction features such as amount, description or dates.
- Proper multi-commodity and valuation :: beans wants to make it
     simple to do both at-cost and at-market valuations of your
     assets, while maintaining correctness of the balance. Instead of
     converting aggregated account data and adding valuation as an
     afterthought, beans applies valuation directly at the transaction
     level. For example, if you choose to display a balance at market
     prices, beans will transparently insert valuation transactions to
     reflect gains and losses due to price changes.
- Simple and elegant implementation :: beans is written in [[https://haskell-lang.org/][Haskell]], an
     excellent language for concise and beautiful code. Also, while
     beans adopts concepts from other tools, compatiblity is not an
     objective.

#+TOC: headlines 3


** Getting beans

For the moment, you have to build from source as I do not distribute any binaries. Make sure you have git installed and run:

#+BEGIN_EXAMPLE sh
  git clone https://github.com/sboehler/beans.git
#+END_EXAMPLE


** Installing beans

*** Using Stack

/(Probably the easiest option on most platforms)/

First, follow the instructions [[https://docs.haskellstack.org/en/stable/README/][here]] to install stack for your
platform. Then:

#+BEGIN_SRC sh
  cd beans
  stack install
#+END_SRC

#+RESULTS:

This will install the beans binary in ~$HOME/.local/bin/beans~. Add this
directory to your path and you're good to go:

#+BEGIN_EXAMPLE sh
  export PATH=~/.local/bin:$PATH
#+END_EXAMPLE

Let me know if you encounter problems using stack, I do not use it much myself.

*** Using Nix

Make sure you have the [[https://nixos.org/nix/][nix package manager]] installed for your
platform. Then:

#+BEGIN_EXAMPLE sh
  cd beans
  nix-build release.nix
#+END_EXAMPLE

The beans binary will be made available locally in ~./result/bin/beans~
and can be run from there.

*** Using Cabal

If you intend to develop beans or run the test suite. Make sure cabal
and hpack are installed:

#+BEGIN_EXAMPLE sh
  cd beans
  cabal configure --enable-tests
  cabal build
#+END_EXAMPLE

The beans binary will be made available in ./dist/build/beans/beans
and can be run from there.


** Working with beans

This is what you see when you call beans:

#+NAME: beans-help
#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans --help
#+END_SRC

#+RESULTS: beans-help
#+begin_example
beans

Usage: beans COMMAND
  A plain text accounting tool

Available options:
  -h,--help                Show this help text

Available commands:
  balance                  Print a generic balance
  incomeStatement          Print a formatted income statement
  balanceSheet             Print a formatted balance sheet
  import                   Import data
  journal                  Show the changes in one or several accounts over a
                           period
#+end_example

Use ~beans balance --help~ to get further help on available options.

*** Importing data

beans offers assistance both with importing bank account statements,
the most tiring process in plain text accounting.

In a first step, bank account statements need to be parsed. The
following is what a statement from my bank might look like. Kind of a
CSV format, but then not really.

#+BEGIN_SRC sh :exports both :results output
# those files are ISO-8859-15 encoded, we need to convert them:
iconv -f ISO-8859-15 -t UTF-8 examples/postfinance.csv
#+END_SRC

#+RESULTS:
#+begin_example
Datum von:;2017-05-23
Buchungsart:;Alle Buchungen
Konto:;CHXXXXXXXXXXXXXXXXXXX
Währung:;CHF
Buchungsdatum;Avisierungstext;Gutschrift;Lastschrift;Valuta;Saldo
2017-06-01;"Acme Corp";;-135.00;2017-06-01;
2017-05-31;"FOOBAR COMMUNICATIONS";;-52.60;2017-05-31;
2017-05-29;"Transfer 01-45-06 Bigbank";;-1040.00;2017-05-29;36096.54
2017-05-26;"Cleaning Service";;-300.00;2017-05-24;37136.54
2017-05-26;"Supermarket Fine Foods";;-115.20;2017-05-26;
2017-05-26;"Bank Nextgen ";;-250.00;2017-05-26;
2017-05-26;"Tire Car Sales";;-95.85;2017-05-26;

Disclaimer:
Dies ist kein durch PostFinance AG erstelltes Dokument. PostFinance AG ist nicht verantwortlich für den Inhalt.
#+end_example

As formats might vary wildly across institutions, a custom parser is
needed. In the current version, only a 'postfinance' parser is
available (written using [[http://hackage.haskell.org/package/megaparsec][Megaparsec)]], but hopefully we will have more in
the future, so that manual transaction entry is limited.

The second step is equally tiring, even when transactions are
autogenerated: assigning accounts to transactions. However, it is
conceptually simple to automate. beans offers a very simple
domain-specific language (DSL) to write rules for importing:

#+BEGIN_SRC sh :exports both :results output
cat ./examples/postfinance.rules
#+END_SRC

#+RESULTS:
: (description =~ "Acme") -> Expenses:Groceries;
: (description =~ "FOOBAR") -> Expenses:MobilePhone;
: (description =~ "(Bigbank|Nextgen)") -> Assets:Investments;
: (description =~ "Clean.*") -> Expenses:Cleaning;
: (description =~ "Supermarket") -> Expenses:Groceries;
: (description =~ "Car" and abs amount < 1000) -> Expenses:Car;
: (description =~ "Car" and abs amount >= 1000) -> Assets:Car;
: (true) -> Expenses:ToBeEditedManually;

Rules are meant to be reusable across different sources of
information. Various standardized variables from the importer's output
are available, as well as boolean ("not", "and", "or"), arithmetic
("+", "-", "abs") and string (most useful: the regex match (=~)
operator) expressions.

Rules should be wrapped in parentheses and, when matched, return the
account specified on the right hand side of the arrow (->). The rules
file should be concluded with a catch-all, which can yield a TODO
account for later manual editing. Rules files are independent of
importers, thus one file can be used for various sources.

Having both a parser and a rules file, converting the bank account
statement to transactions is a simple command:

#+NAME: beans-import
#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans import -i ch.postfinance -c examples/postfinance.rules -a Assets:Checking examples/postfinance.csv
#+END_SRC

~import~ outputs a simple list of transactions to stdout, in a format
parseable by beans and with correct accounts assigned. It is up to the
user to pipe them into a journal or a temporary file for further,
manual editing.

#+RESULTS: beans-import
#+begin_example
2017-06-01 * "Acme Corp"
  Assets:Checking -135.00 CHF
  Expenses:Groceries 135.00 CHF

2017-05-31 * "FOOBAR COMMUNICATIONS"
  Assets:Checking -52.60 CHF
  Expenses:MobilePhone 52.60 CHF

2017-05-29 * "Transfer 01-45-06 Bigbank"
  Assets:Checking -1040.00 CHF
  Assets:Investments 1040.00 CHF

2017-05-26 * "Cleaning Service"
  Assets:Checking -300.00 CHF
  Expenses:Cleaning 300.00 CHF

2017-05-26 * "Supermarket Fine Foods"
  Assets:Checking -115.20 CHF
  Expenses:Groceries 115.20 CHF

2017-05-26 * "Bank Nextgen "
  Assets:Checking -250.00 CHF
  Assets:Investments 250.00 CHF

2017-05-26 * "Tire Car Sales"
  Assets:Checking -95.85 CHF
  Expenses:Car 95.85 CHF

#+end_example

The importing functionality of beans can of course also be used if you
use another plain-text accounting tool. beancount's syntax is largely
compatible with beans.

*** Creating a journal

Every balancing command in beans is based on a journal. beans journals
uses a format largely similar to beancount:

#+INCLUDE: "examples/example1.bean" example

I am using Emacs with org-mode to manage my journal in one large file,
however there is an ~include~ directive as well which allows for
splitting a journal in different files.

Some remarks:
- Accounts must be opened (and closed, if so desired) explicitly. They
  can be open for all commodities (default) or restricted to a list of
  them
- Account names must start with "Assets", "Liabilities", "Equity",
  "Expenses" or "Income", depending on their type.
- Transactions need not be ordered, beans automatically orders them by
  date.
- Transactions with only one commodity can have a 'wildcard' booking,
  which is automatically assigned the total of the other bookings
  (this is the same as in other plain-text accounting tools)
- However, transactions with several commodities (e.g. the stock trade
  in the example above) must not have wildcard bookings. The reason is
  that beans cannot decide on a useful way to balance different
  commodities. Depending on whether one wants to convert commodities
  at cost or at market value, beans will add balancing accounts
  automatically.

*** Tracking changes in accounts

beans allows for sophisticated analysis and reconciliation of account
balances. A simple use case is to reconcile start and ending balances
of a specific account:

#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans journal -j ./examples/example1.bean --filter Assets:Checking
#+END_SRC

#+RESULTS:
#+begin_example
|------------+----------+-----+----------------------------+-----------------------+-----------+------|
| <MIN_DATE> |          |     | Assets:Checking            |                       |           |      |
|------------+----------+-----+----------------------------+-----------------------+-----------+------|
| 2018-01-01 | 15000.00 | USD | Opening balance            | Equity:OpeningBalance | -15000.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-01-02 | -2000.00 | USD | Rent January               | Expenses:Rent         |   2000.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-01-10 | -1700.00 | USD | Investing in stock         | Assets:Portfolio      |     10.00 | AAPL |
|            |  -300.00 | USD | Food                       | Expenses:Groceries    |    300.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-01-12 |  -200.00 | USD | Hungry again               | Expenses:Groceries    |    200.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-01-14 | -3500.00 | USD | I want to be part of this! | Assets:Wallet         |      0.25 | BTC  |
|            |          |     |                            |                       |           |      |
| 2018-01-20 |  -100.00 | USD | Something to read          | Expenses:Books        |    100.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-01-25 |  4000.00 | USD | Salary January             | Income:Salary         |  -4000.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-02-01 | -2000.00 | USD | Rent February              | Expenses:Rent         |   2000.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-02-25 |  4000.00 | USD | Salary February            | Income:Salary         |  -4000.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-03-01 | -2000.00 | USD | Rent March                 | Expenses:Rent         |   2000.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-03-02 |  -200.00 | USD | Yet more food              | Expenses:Groceries    |    200.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-03-20 |  -400.00 | USD | More food                  | Expenses:Groceries    |    400.00 | USD  |
|            |          |     |                            |                       |           |      |
| 2018-03-25 |  4000.00 | USD | Salary March               | Income:Salary         |  -4000.00 | USD  |
|            |          |     |                            |                       |           |      |
|------------+----------+-----+----------------------------+-----------------------+-----------+------|
| <MAX_DATE> | 14600.00 | USD | Assets:Checking            |                       |           |      |
|------------+----------+-----+----------------------------+-----------------------+-----------+------|

#+end_example

The table shows starting and ending balances of the selected account,
as well as all transactions in between. Columns 2 - 4 show what
happened in the selected accounts, columns 5 - 7 show the
corresponding counterbookings and the respective amounts and units.

But we are not restricted to selecting one account. The next example
shows a combined journal for all Asset accounts:

#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans journal -j ./examples/example1.bean --filter Assets
#+END_SRC

#+RESULTS:
#+begin_example
|------------+----------+------+----------------------------+-----------------------+-----------+-----|
| <MIN_DATE> |          |      | Assets                     |                       |           |     |
|------------+----------+------+----------------------------+-----------------------+-----------+-----|
| 2018-01-01 |     0.00 | BTC  | Opening balance            |                       |           |     |
|            |     0.00 | AAPL | Opening balance            |                       |           |     |
|            | 15000.00 | USD  | Opening balance            | Equity:OpeningBalance | -15000.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-01-02 | -2000.00 | USD  | Rent January               | Expenses:Rent         |   2000.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-01-10 | -1700.00 | USD  | Investing in stock         |                       |           |     |
|            |    10.00 | AAPL |                            |                       |           |     |
|            |  -300.00 | USD  | Food                       | Expenses:Groceries    |    300.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-01-12 |  -200.00 | USD  | Hungry again               | Expenses:Groceries    |    200.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-01-14 | -3500.00 | USD  | I want to be part of this! |                       |           |     |
|            |     0.25 | BTC  |                            |                       |           |     |
|            |          |      |                            |                       |           |     |
| 2018-01-20 |  -100.00 | USD  | Something to read          | Expenses:Books        |    100.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-01-25 |  4000.00 | USD  | Salary January             | Income:Salary         |  -4000.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-02-01 | -2000.00 | USD  | Rent February              | Expenses:Rent         |   2000.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-02-25 |  4000.00 | USD  | Salary February            | Income:Salary         |  -4000.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-03-01 | -2000.00 | USD  | Rent March                 | Expenses:Rent         |   2000.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-03-02 |  -200.00 | USD  | Yet more food              | Expenses:Groceries    |    200.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-03-20 |  -400.00 | USD  | More food                  | Expenses:Groceries    |    400.00 | USD |
|            |          |      |                            |                       |           |     |
| 2018-03-25 |  4000.00 | USD  | Salary March               | Income:Salary         |  -4000.00 | USD |
|            |          |      |                            |                       |           |     |
|------------+----------+------+----------------------------+-----------------------+-----------+-----|
| <MAX_DATE> |    10.00 | AAPL | Assets                     |                       |           |     |
|            |     0.25 | BTC  |                            |                       |           |     |
|            | 14600.00 | USD  |                            |                       |           |     |
|------------+----------+------+----------------------------+-----------------------+-----------+-----|

#+end_example

We now see the ending balances in terms of USD and SomeStock
units. However, economically, it is more interesting to see all values
converted to USD. So let's do that, using the same syntax as for the
balance command:

#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans journal -j ./examples/example1.bean --filter Assets -m USD
#+END_SRC

#+RESULTS:
#+begin_example
|------------+----------+-----+----------------------------+-----------------------+-----------+-----|
| <MIN_DATE> |          |     | Assets                     |                       |           |     |
|------------+----------+-----+----------------------------+-----------------------+-----------+-----|
| 2018-01-01 |     0.00 | USD | Opening balance            |                       |           |     |
|            |     0.00 | USD | Opening balance            |                       |           |     |
|            | 15000.00 | USD | Opening balance            | Equity:OpeningBalance | -15000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-01-02 | -2000.00 | USD | Rent January               | Expenses:Rent         |   2000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-01-10 | -1700.00 | USD | Investing in stock         | Equity:Valuation      |     10.00 | USD |
|            |  1690.00 | USD |                            |                       |           |     |
|            |  -300.00 | USD | Food                       | Expenses:Groceries    |    300.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-01-12 |  -200.00 | USD | Hungry again               | Expenses:Groceries    |    200.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-01-14 | -3500.00 | USD | I want to be part of this! | Equity:Valuation      |    147.00 | USD |
|            |  3353.00 | USD |                            |                       |           |     |
|            |          |     |                            |                       |           |     |
| 2018-01-20 |  -100.00 | USD | Something to read          | Expenses:Books        |    100.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-01-25 |  4000.00 | USD | Salary January             | Income:Salary         |  -4000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-02-01 | -1090.00 | USD | Valuation BTC              | Equity:Valuation      |   1090.00 | USD |
|            |   -20.00 | USD | Valuation AAPL             | Equity:Valuation      |     20.00 | USD |
|            | -2000.00 | USD | Rent February              | Expenses:Rent         |   2000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-02-25 |  4000.00 | USD | Salary February            | Income:Salary         |  -4000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-03-01 |   463.75 | USD | Valuation BTC              | Equity:Valuation      |   -463.75 | USD |
|            |    80.00 | USD | Valuation AAPL             | Equity:Valuation      |    -80.00 | USD |
|            | -2000.00 | USD | Rent March                 | Expenses:Rent         |   2000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-03-02 |  -200.00 | USD | Yet more food              | Expenses:Groceries    |    200.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-03-20 |  -400.00 | USD | More food                  | Expenses:Groceries    |    400.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-03-25 |  4000.00 | USD | Salary March               | Income:Salary         |  -4000.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-04-01 | -1022.75 | USD | Valuation BTC              | Equity:Valuation      |   1022.75 | USD |
|            |   -90.00 | USD | Valuation AAPL             | Equity:Valuation      |     90.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-05-01 |   562.75 | USD | Valuation BTC              | Equity:Valuation      |   -562.75 | USD |
|            |    30.00 | USD | Valuation AAPL             | Equity:Valuation      |    -30.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-06-01 |  -387.25 | USD | Valuation BTC              | Equity:Valuation      |    387.25 | USD |
|            |   210.00 | USD | Valuation AAPL             | Equity:Valuation      |   -210.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-07-01 |  -292.75 | USD | Valuation BTC              | Equity:Valuation      |    292.75 | USD |
|            |   -50.00 | USD | Valuation AAPL             | Equity:Valuation      |     50.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-08-01 |   314.00 | USD | Valuation BTC              | Equity:Valuation      |   -314.00 | USD |
|            |   160.00 | USD | Valuation AAPL             | Equity:Valuation      |   -160.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-09-01 |  -102.75 | USD | Valuation BTC              | Equity:Valuation      |    102.75 | USD |
|            |   260.00 | USD | Valuation AAPL             | Equity:Valuation      |   -260.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-10-01 |  -153.50 | USD | Valuation BTC              | Equity:Valuation      |    153.50 | USD |
|            |   -20.00 | USD | Valuation AAPL             | Equity:Valuation      |     20.00 | USD |
|            |          |     |                            |                       |           |     |
| 2018-11-01 |   -55.00 | USD | Valuation BTC              | Equity:Valuation      |     55.00 | USD |
|            |   -30.00 | USD | Valuation AAPL             | Equity:Valuation      |     30.00 | USD |
|            |          |     |                            |                       |           |     |
|------------+----------+-----+----------------------------+-----------------------+-----------+-----|
| <MAX_DATE> | 18409.50 | USD | Assets                     |                       |           |     |
|------------+----------+-----+----------------------------+-----------------------+-----------+-----|

#+end_example

The journal now not only shows explicit inflows and outflows, but also
valuation corrections due to price changes at the specific date they occurred.

As a general rule, use the balance command if you are interested in
aggregates over a certain period. Use the journal command and suitable
filtering to see the details by date. Together, those commands can
answer almost any question about a journal.

*** Standard reports

beans has some standard reports which allow for easy creation of a
nicely formatted balance sheet or income statement. They share a rich
set of filtering options.

**** Income Statement

Let's start with an income statement. Our journal starts at the
beginning of 2018, with the following balance:

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balanceSheet -j examples/example1.bean --to 2018-01-01
#+END_SRC

#+RESULTS:
: |------------+----------+-----------+------------------+----------+-----------|
: | Account    | Amount   | Commodity | Account          | Amount   | Commodity |
: |------------+----------+-----------+------------------+----------+-----------|
: | Assets     | 15000.00 | USD       | Equity           | 15000.00 | USD       |
: |   Checking | 15000.00 | USD       |   OpeningBalance | 15000.00 | USD       |
: |------------+----------+-----------+------------------+----------+-----------|
: | Total      | 15000.00 | USD       | Total            | 15000.00 | USD       |
: |------------+----------+-----------+------------------+----------+-----------|
:

No surprise, this is our opening balance.

Now let's get an overview of our income and expenses in January 2018:

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans incomeStatement -j examples/example1.bean --to 2018-01-31
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+----------+-----------|
| Account     | Amount   | Commodity |
|-------------+----------+-----------|
| Income      |  4000.00 | USD       |
|   Salary    |  4000.00 | USD       |
|-------------+----------+-----------|
| Expenses    | -2600.00 | USD       |
|   Books     |  -100.00 | USD       |
|   Groceries |  -500.00 | USD       |
|   Rent      | -2000.00 | USD       |
|-------------+----------+-----------|
| Total       |  1400.00 | USD       |
|-------------+----------+-----------|

#+end_example

**** Balance Sheet

As of 1 February, the balance looks as follows:

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balanceSheet -j examples/example1.bean --to 2018-02-01
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+---------+-----------+--------------------+----------+-----------|
| Account     | Amount  | Commodity | Account            | Amount   | Commodity |
|-------------+---------+-----------+--------------------+----------+-----------|
| Assets      |   10.00 | AAPL      | Equity             | 14400.00 | USD       |
|             |    0.25 | BTC       |   OpeningBalance   | 15000.00 | USD       |
|             | 9200.00 | USD       |   RetainedEarnings |  -600.00 | USD       |
|   Checking  | 9200.00 | USD       |                    |          |           |
|   Portfolio |   10.00 | AAPL      |                    |          |           |
|   Wallet    |    0.25 | BTC       |                    |          |           |
|-------------+---------+-----------+--------------------+----------+-----------|
| Total       |   10.00 | AAPL      | Total              | 14400.00 | USD       |
|             |    0.25 | BTC       |                    |          |           |
|             | 9200.00 | USD       |                    |          |           |
|-------------+---------+-----------+--------------------+----------+-----------|

#+end_example

What happened? Our sample person did invest in 0.25 BTC and 10 AAPL
during January, as is evident in the journal. This is not reflected in
the income statement, as we did not model the trades with income and
expenses, but rather against equity.

**** Valuation at latest prices

Seeing all commodities separately helps tracking the inventory, but
they are difficult to compare. Fortunately, we have some prices in the
journal, so we can print the same table valued at market prices.

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balanceSheet -j examples/example1.bean --to 2018-02-01 -m USD
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+----------+-----------+--------------------+----------+-----------|
| Account     | Amount   | Commodity | Account            | Amount   | Commodity |
|-------------+----------+-----------+--------------------+----------+-----------|
| Assets      | 13133.00 | USD       | Equity             | 13133.00 | USD       |
|   Checking  |  9200.00 | USD       |   OpeningBalance   | 15000.00 | USD       |
|   Portfolio |  1670.00 | USD       |   RetainedEarnings |  -600.00 | USD       |
|   Wallet    |  2263.00 | USD       |   Valuation        | -1267.00 | USD       |
|-------------+----------+-----------+--------------------+----------+-----------|
| Total       | 13133.00 | USD       | Total              | 13133.00 | USD       |
|-------------+----------+-----------+--------------------+----------+-----------|

#+end_example

When valuating the balance in a certain reference commodity, beans accounts for
changes in valuation using the Equity:Valuation account. It reflects
gains and losses over time with respect to the reference currency.

**** Analysis & Filtering

Now, how is this valuation loss explained? beans allows for arbitrary slicing:


#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balanceSheet -j examples/example1.bean --to 2018-02-01 -m USD --filter Portfolio
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+----------+-----------+-------------+--------+-----------|
| Account     | Amount   | Commodity | Account     | Amount | Commodity |
|-------------+----------+-----------+-------------+--------+-----------|
| Assets      |   -30.00 | USD       | Equity      | -30.00 | USD       |
|   Checking  | -1700.00 | USD       |   Valuation | -30.00 | USD       |
|   Portfolio |  1670.00 | USD       |             |        |           |
|-------------+----------+-----------+-------------+--------+-----------|
| Total       |   -30.00 | USD       | Total       | -30.00 | USD       |
|-------------+----------+-----------+-------------+--------+-----------|

#+end_example

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balanceSheet -j examples/example1.bean --to 2018-02-01 -m USD --filter Wallet
#+END_SRC

#+RESULTS:
#+begin_example
|------------+----------+-----------+-------------+----------+-----------|
| Account    | Amount   | Commodity | Account     | Amount   | Commodity |
|------------+----------+-----------+-------------+----------+-----------|
| Assets     | -1237.00 | USD       | Equity      | -1237.00 | USD       |
|   Checking | -3500.00 | USD       |   Valuation | -1237.00 | USD       |
|   Wallet   |  2263.00 | USD       |             |          |           |
|------------+----------+-----------+-------------+----------+-----------|
| Total      | -1237.00 | USD       | Total       | -1237.00 | USD       |
|------------+----------+-----------+-------------+----------+-----------|

#+end_example

The analysis shows that the lion's share of the loss is due to the BTC
trade, which happened in the Assets:Wallet account.

Commodities are freely convertible. How about a balance sheet in BTC?

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balanceSheet -j examples/example1.bean --to 2018-02-01 -m BTC
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+--------+-----------+--------------------+--------+-----------|
| Account     | Amount | Commodity | Account            | Amount | Commodity |
|-------------+--------+-----------+--------------------+--------+-----------|
| Assets      |   1.45 | BTC       | Equity             |   1.45 | BTC       |
|   Checking  |   1.02 | BTC       |   OpeningBalance   |   1.12 | BTC       |
|   Portfolio |   0.18 | BTC       |   RetainedEarnings |  -0.12 | BTC       |
|   Wallet    |   0.25 | BTC       |   Valuation        |   0.45 | BTC       |
|-------------+--------+-----------+--------------------+--------+-----------|
| Total       |   1.45 | BTC       | Total              |   1.45 | BTC       |
|-------------+--------+-----------+--------------------+--------+-----------|

#+end_example

Stepping forward in time, what does the income statement look like over H1/2018?

#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans incomeStatement -j examples/example1.bean --from 2018-01-01 --to 2018-06-30
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+----------+-----------|
| Account     | Amount   | Commodity |
|-------------+----------+-----------|
| Income      | 12000.00 | USD       |
|   Salary    | 12000.00 | USD       |
|-------------+----------+-----------|
| Expenses    | -7200.00 | USD       |
|   Books     |  -100.00 | USD       |
|   Groceries | -1100.00 | USD       |
|   Rent      | -6000.00 | USD       |
|-------------+----------+-----------|
| Total       |  4800.00 | USD       |
|-------------+----------+-----------|

#+end_example

*** Low-level balancing

In addition to the predefined reports, beans has a generic balancing command:

#+NAME: beans-balance
#+BEGIN_SRC sh :exports both :results output :var PATH="./dist/build/beans"
  beans balance -j examples/example1.bean
#+END_SRC

This outputs a balance for all accounts without any currency conversions.

#+RESULTS: beans-balance
#+begin_example
|------------------+-----------+-----------|
| Account          | Amount    | Commodity |
|------------------+-----------+-----------|
|                  |     10.00 | AAPL      |
|                  |      0.25 | BTC       |
|                  |  -5200.00 | USD       |
| Assets           |     10.00 | AAPL      |
|                  |      0.25 | BTC       |
|                  |  14600.00 | USD       |
|   Checking       |  14600.00 | USD       |
|   Portfolio      |     10.00 | AAPL      |
|   Wallet         |      0.25 | BTC       |
| Equity           | -15000.00 | USD       |
|   OpeningBalance | -15000.00 | USD       |
| Expenses         |   7200.00 | USD       |
|   Books          |    100.00 | USD       |
|   Groceries      |   1100.00 | USD       |
|   Rent           |   6000.00 | USD       |
| Income           | -12000.00 | USD       |
|   Salary         | -12000.00 | USD       |
|------------------+-----------+-----------|

#+end_example

There are some formatting options available (some of which also apply
to the predefined reports):

#+NAME: beans-balance-with-options
#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans balance -j examples/example1.bean --flat --depth 0
#+END_SRC

#+RESULTS: beans-balance-with-options
#+begin_example
|----------+-----------+-----------|
| Account  | Amount    | Commodity |
|----------+-----------+-----------|
|          |     10.00 | AAPL      |
|          |      0.25 | BTC       |
|          |  -5200.00 | USD       |
| Assets   |     10.00 | AAPL      |
|          |      0.25 | BTC       |
|          |  14600.00 | USD       |
|          |     10.00 | AAPL      |
|          |      0.25 | BTC       |
|          |  14600.00 | USD       |
| Equity   | -15000.00 | USD       |
|          | -15000.00 | USD       |
| Expenses |   7200.00 | USD       |
|          |   7200.00 | USD       |
| Income   | -12000.00 | USD       |
|          | -12000.00 | USD       |
|----------+-----------+-----------|

#+end_example

Valuation at market (i.e. latest available prices) is always an option:

#+NAME: beans-balance-market1
#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans balance -j examples/example1.bean -m USD
#+END_SRC

#+RESULTS: beans-balance-market1
#+begin_example
|------------------+-----------+-----------|
| Account          | Amount    | Commodity |
|------------------+-----------+-----------|
|                  |      0.00 | USD       |
| Assets           |  18409.50 | USD       |
|   Checking       |  14600.00 | USD       |
|   Portfolio      |   2220.00 | USD       |
|   Wallet         |   1589.50 | USD       |
| Equity           | -13609.50 | USD       |
|   OpeningBalance | -15000.00 | USD       |
|   Valuation      |   1390.50 | USD       |
| Expenses         |   7200.00 | USD       |
|   Books          |    100.00 | USD       |
|   Groceries      |   1100.00 | USD       |
|   Rent           |   6000.00 | USD       |
| Income           | -12000.00 | USD       |
|   Salary         | -12000.00 | USD       |
|------------------+-----------+-----------|

#+end_example

We can also analyze changes in the balance between specific dates:

#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans balance -j examples/example1.bean -m USD --from 2018-06-30 --to 2018-10-30
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+---------+-----------|
| Account     | Amount  | Commodity |
|-------------+---------+-----------|
|             |    0.00 | USD       |
| Assets      |  115.00 | USD       |
|   Portfolio |  350.00 | USD       |
|   Wallet    | -235.00 | USD       |
| Equity      | -115.00 | USD       |
|   Valuation | -115.00 | USD       |
|-------------+---------+-----------|

#+end_example

As we didn't record any transactions in the journal for the second
half of 2018, the corresponding changes in the balance sheet are
uniquely due to market price changes.

#+RESULTS:
#+begin_example
|-------------+---------+-----------|
| Account     | Amount  | Commodity |
|-------------+---------+-----------|
|             |    0.00 | USD       |
| Assets      |  115.00 | USD       |
|   Portfolio |  350.00 | USD       |
|   Wallet    | -235.00 | USD       |
| Equity      | -115.00 | USD       |
|   Valuation | -115.00 | USD       |
|-------------+---------+-----------|

#+end_example

Using filtering, we can eliminate the effect of income and expenses
and track valuation changes over the entire period:

#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans balance -j examples/example1.bean --filter Valuation -m USD
#+END_SRC

#+RESULTS:
#+begin_example
|-------------+----------+-----------|
| Account     | Amount   | Commodity |
|-------------+----------+-----------|
|             |     0.00 | USD       |
| Assets      | -1390.50 | USD       |
|   Checking  | -5200.00 | USD       |
|   Portfolio |  2220.00 | USD       |
|   Wallet    |  1589.50 | USD       |
| Equity      |  1390.50 | USD       |
|   Valuation |  1390.50 | USD       |
|-------------+----------+-----------|

#+end_example

How about bitcoin?

#+NAME: beans-balance-market-2
#+BEGIN_SRC sh :exports both :results output verbatim :var PATH="./dist/build/beans"
  beans balance -j examples/example1.bean -m BTC
#+END_SRC

#+RESULTS: beans-balance-market-2
#+begin_example
|------------------+--------+-----------|
| Account          | Amount | Commodity |
|------------------+--------+-----------|
|                  |   0.00 | BTC       |
| Assets           |   2.90 | BTC       |
|   Checking       |   2.30 | BTC       |
|   Portfolio      |   0.35 | BTC       |
|   Wallet         |   0.25 | BTC       |
| Equity           |  -2.44 | BTC       |
|   OpeningBalance |  -1.12 | BTC       |
|   Valuation      |  -1.32 | BTC       |
| Expenses         |   0.65 | BTC       |
|   Books          |   0.01 | BTC       |
|   Groceries      |   0.09 | BTC       |
|   Rent           |   0.55 | BTC       |
| Income           |  -1.11 | BTC       |
|   Salary         |  -1.11 | BTC       |
|------------------+--------+-----------|

#+end_example

beans derives arbitrary commodity conversions between all commodities,
as long as there is at least one path (possibly over several links)
from one commodity to another. For example, conversion from SomeStock
in CHF is possible when prices of SomeStock in USD and CHF in USD is
available. Inverted rates are derived automatically.

At the moment, beans offers either no valuation or valuation at market
prices. Valuation at cost is yet to be implemented.

*** Transaction-level valuation

beans applies valuation at the level of transactions, which seems
unique amongst plain-text accounting tools. In the examples above, if
a conversion to a common commodity is desired, beans will:

- convert all bookings over the entire ledger to that commodity at
  market value (given by the transitive & reflexive closure of price
  directives at the transaction date),

- insert valuation bookings for the accumulated positions of all asset
  and liability accounts whenever prices change. These adjustment are
  balanced against an Equity:Valuation account, which is hard-coded
  for the moment.

Every difference in value of an account over a period is explicitly
modeled by corresponding valuation transactions. This greatly
facilitates introspection and analysis, as every unit of the valuation
commodity can be accounted for explicitly.


** Developing beans

Development is very much in progress and beans is not really stable
yet. It seems though that the basic pipeline (importing -
categorizing - balancing) is there, and I am using it to balance my
own journal. beans development is at the moment entirely driven by my
own needs. It has also been a playground for experiments and lots of
refactoring for fun with Haskell.

Use beans at your own risk - at the moment, it is certainly
advantageous if you know some Haskell.

*** Roadmap

beans still has long way to go. I do this in my spare time and I do
not have an explicit road map, but here are some ideas I'd like to be
working on in the future:

**** Shorter term
- [X] new command to print and filter transactions (as-is or at market value)
- [ ] provide a more realistic example file
- [ ] multi-period reports (yearly, monthly, weekly, daily, ...)
- [ ] colored output
- [ ] friendlier command line
- [ ] accounting at cost
- [ ] more importers (I'll do those that I need personally, but I am happy
  to receive contributions if they are provided with a sample file /
  test)

**** Longer term
- [ ] general reporting infrastructure
- [ ] more reports (income statement, cash flow statement)
- [ ] plotting / graphs
- [ ] portfolio performance calculation
- [ ] export to other tools (beancount / hledger / ledger)
- [ ] more UI options (web, terminal)

*** Compatibility

beans journals are in syntax and semantics largely similar to
beancount journals. However, due to some differences in semantics
(e.g. the treatment of mult-commodity transactions), there is no
guarantee that a beans journal works in beancount. Furthermore, I do
not want beans to be bound by restrictions and conventions other tools
might impose.

The best solution to facilitate use of multiple tools at some point
would be an export commmand (like beancount provides), which
translates the ledger into other formats.

*** Dev setup

I am using Emacs with the excellent [[https://github.com/jyp/dante][Dante]] mode under [[https://nixos.org/][Nixo]]s. Let me
know your experience with building beans on other setups.

*** Adding an importer

See the example [[../src/Beans/Import/CH/Postfinance][here]]. The directory should match the country of the
bank. Make a pull request if you want to have it included in beans
(preferrably with a test case and an anonymized sample file).


** License

BSD-3
