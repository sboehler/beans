# -*- org-confirm-babel-evaluate: nil -*-

#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+HTML_LINK_HOME: https://sboehler.github.io/beans
#+TITLE: The beans manual
#+AUTHOR:    Silvio BÃ¶hler
#+EMAIL:     (concat "silvio" at-sign "monadic.ch")
#+DESCRIPTION: Plain-text accounting using beans
#+KEYWORDS:  plain-text accounting, beans, ledger, hledger, beancount, ledger-cli, accounting, money, personal finance
#+LANGUAGE:  en

#+PROPERTY: header-args:sh :var PATH="./result/bin" :results output verbatim :exports both

* About beans

beans is a [[https://plaintextaccounting.org][plain text accounting tool]] in the tradition of [[https://www.ledger-cli.org][ledger]],
[[https://hledger.org][hledger]] and [[https://furius.ca/beancount/][beancount]].

** Project goals

*** Built-in file importers
The greatest pain of plain text accounting is to import financial
statements from financial service providers such as banks and credit
cards. ~beans~ strives to include [[importers][importers]] for known formats.

*** Automatic categorization
~beans~ provides a Bayesien inference (machine learning) engine to
automatically assign accounts based on your existing ledger.

*** ~beans~ always balances
~beans~ aims to make it simple to do at-market valuations of your
assets, while maintaining correctness of the balance. Instead of
converting aggregated account data and adding valuation as an
afterthought, ~beans~ applies valuation directly at the transaction
level. For example, if you choose to display a balance at market
prices, ~beans~ will transparently insert valuation transactions to
reflect gains and losses due to price changes.

*** Transcode to beancount
Translate your beans journal into a beancount-compatible format to
make use of the great tooling universe of beancount, such as the Fava
web interface.

*** Simple implementation
~beans~ is written in [[https://haskell-lang.org/][Haskell]], an excellent language for concise and
beautiful code. Also, while ~beans~ adopts concepts from other tools,
compatiblity is not an objective.

** Changes (if you used a previous version)
- The previous rules engine got replaced by a Bayesian inference
  mechanism, which in practice is much less work.
- The file format changed: no more indentation, for friendlier editing
- Multi-column reports
- Some more importers
- Lots of changes under the hood

* Getting beans

** Obtaining the source

~beans~' source code can be found on [[https://github.com/sboehler/beans][github]]. For the moment, you have
to build from source.

Make sure you have git installed and run:

#+BEGIN_EXAMPLE sh
  git clone https://github.com/sboehler/beans.git
#+END_EXAMPLE

** Installing beans

*** Using Stack

~stack~ is probably the easiest option on most platforms to get
started quickly. First, follow the instructions [[https://docs.haskellstack.org/en/stable/README/][here]] to install ~stack~
for your platform. Then:

#+BEGIN_EXAMPLE sh
  cd beans
  stack install
#+END_EXAMPLE

#+RESULTS:

This will install the ~beans~ binary in ~$HOME/.local/bin/beans~. Add this
directory to your path and you're good to go:

#+BEGIN_EXAMPLE sh
  export PATH=~/.local/bin:$PATH
#+END_EXAMPLE

Please file a bug if you encounter problems using ~stack~.

*** Using Nix

Make sure you have the [[https://nixos.org/nix/][nix package manager]] installed for your
platform. Then:

#+BEGIN_EXAMPLE sh
  cd beans
  nix-build --attr beans release.nix
#+END_EXAMPLE

The beans binary will be made available locally in ~./result/bin/beans~
and can be run from there. I am using nix to develop ~beans~, so this
option is the one that is supported best.

*** Using Cabal

If you intend to develop beans or run the test suite. Make sure cabal
and hpack are installed:

#+BEGIN_EXAMPLE sh
  cd beans
  cabal new-build
#+END_EXAMPLE

The beans binary will be made available in ./dist/build/beans/beans
and can be run from there.

** Getting help
This guide is incomplete and might be out of date. To get an overview
of your possibilities, ~beans~ has a built-in help command:

#+BEGIN_SRC sh
beans --help
#+END_SRC

#+RESULTS:
#+begin_example
beans

Usage: beans COMMAND
  A plain text accounting tool

Available options:
  -h,--help                Show this help text

Available commands:
  balance                  Print a generic balance
  fetch                    Fetch latest prices
  import                   Import transactions
  infer                    Infer accounts
  transcode                Transcode to beancount
#+end_example

* Working with beans

~beans~ is a command line tool and has some self-documenting
features. Run the following command to get started:

#+NAME: beans-help
#+BEGIN_SRC sh
  beans --help
#+END_SRC

#+RESULTS: beans-help
#+begin_example
beans

Usage: beans COMMAND
  A plain text accounting tool

Available options:
  -h,--help                Show this help text

Available commands:
  balance                  Print a generic balance
  fetch                    Fetch latest prices
  import                   Import transactions
  infer                    Infer accounts
  transcode                Transcode to beancount
#+end_example

Use ~beans <command> --help~ to get further help on available options.

** Importing data

beans offers assistance with importing bank account statements, the
most tiring process in plain text accounting.

*** <<importers>>Importers

In a first step, bank account statements need to be parsed. The
following is what a statement from my bank might look like.

#+include: ./examples/postfinance.csv example

This is a kind of a CSV format, but then not really, so this is
difficult to parse with a general parser.  ~beans~ strives to have
built-in support for as many file formats as possible. Currently, the
following parsers are available:

- us.interactivebrokers
- ch.postfinance
- ch.supercardplus
- ch.cumulus
- ch.swissquote

*** Importing data

If you are lucky enough that the format of your bank is supported,
converting the bank account statement to transactions is a simple
command:

#+NAME: beans-import
#+BEGIN_SRC sh
  beans import -i ch.postfinance -a Assets:Checking examples/postfinance.csv
#+END_SRC

~import~ outputs a simple list of transactions to stdout, in a format
parseable by ~beans~ and with unknown accounts marked as TBD. It is up to the
user to pipe them into a journal or a temporary file for further
editing.

#+RESULTS: beans-import
#+begin_example
2017-05-26 "Cleaning Service"
Assets:Checking -300 CHF
TBD 300 CHF

2017-05-26 "Supermarket Fine Foods"
Assets:Checking -115.2 CHF
TBD 115.2 CHF

2017-05-26 "Bank Nextgen "
Assets:Checking -250 CHF
TBD 250 CHF

2017-05-26 "Tire Car Sales"
Assets:Checking -95.85 CHF
TBD 95.85 CHF

2017-05-29 "Transfer 01-45-06 Bigbank"
Assets:Checking -1040 CHF
TBD 1040 CHF

2017-05-31 "FOOBAR COMMUNICATIONS"
Assets:Checking -52.6 CHF
TBD 52.6 CHF

2017-06-01 "Acme Corp"
Assets:Checking -135 CHF
TBD 135 CHF
#+end_example

*** Assigning accounts

Previous version of ~beans~ used to feature a DSL to specify rules,
but this still involved too much thinking and writing.

~beans~ now has a built-in Bayesien inference (a.k.a. machine
learning) tool. Run ~beans infer~ to automatically replace TBD
accounts in a target file based on the existing transactions in your
ledger. Sounds magic, but works very well in practice. You need to get
it started by assigning accounts manually for a few weeks.

** Creating a journal

*** Journal files

Most commands in beans are based on a journal. beans journals uses a
format largely similar to beancount, with the exception that ~beans~
neither requires nor allows indentation:

#+INCLUDE: "examples/example.bean" example

I am using Emacs with org-mode to manage my journal in one large file
(org-mode titles are treated as comments), however there is an
~include~ directive as well which allows for splitting a journal in
different files.

*** Conventions

- Accounts must be opened (and closed, if so desired) explicitly. They
  can be open for all commodities (default) or restricted to a list of
  them
- Account names must start with "Assets", "Liabilities", "Equity",
  "Expenses" or "Income", depending on their type.
- Transactions need not be ordered, ~beans~ automatically orders them by
  date.
- Transactions with only one commodity can have a 'wildcard' booking,
  which is automatically assigned the total of the other bookings
  (this is the same as in other plain-text accounting tools)
- Unlike ~beancount~, ~beans~ uses the convention that ~balance~
  directives refer to balances at the end of the given date. This is
  congruent with standard practices in the financial industry.

** Balancing

*** Global balance

In addition to the predefined reports, beans has a generic balancing command:

#+NAME: beans-balance
#+BEGIN_SRC sh
  beans balance -j examples/example.bean
#+END_SRC

This outputs a balance for all accounts without currency
conversions, on the first and last day of the ledger

#+RESULTS: beans-balance
#+begin_example
|------------------+------------+------------|
| Account          | 2018-01-01 | 2018-11-01 |
|------------------+------------+------------|
| Assets           |            |            |
|   Checking       |            |            |
|     USD          |   15000.00 |   14600.00 |
|   Portfolio      |            |            |
|     AAPL         |            |      10.00 |
|   Wallet         |            |            |
|     BTC          |            |       0.25 |
|------------------+------------+------------|
| Equity           |            |            |
|   Gains          |            |            |
|     AAPL         |            |     -10.00 |
|     BTC          |            |      -0.25 |
|     USD          |            |    5200.00 |
|   OpeningBalance |            |            |
|     USD          |  -15000.00 |  -15000.00 |
|------------------+------------+------------|
| Income           |            |            |
|   Salary         |            |            |
|     USD          |            |  -12000.00 |
|------------------+------------+------------|
| Expenses         |            |            |
|   Books          |            |            |
|     USD          |            |     100.00 |
|   Groceries      |            |            |
|     USD          |            |    1100.00 |
|   Rent           |            |            |
|     USD          |            |    6000.00 |
|------------------+------------+------------|
| Total            |            |            |
|   AAPL           |            |            |
|   BTC            |            |            |
|   USD            |            |            |
|------------------+------------+------------|

#+end_example

You want a multi-column balance?

#+NAME: beans-balance-multi
#+BEGIN_SRC sh
  beans balance -j examples/example.bean --interval quarterly
#+END_SRC

#+RESULTS: beans-balance-multi
#+begin_example
|------------------+------------+------------+------------+------------+------------|
| Account          | 2017-12-31 | 2018-03-31 | 2018-06-30 | 2018-09-30 | 2018-12-31 |
|------------------+------------+------------+------------+------------+------------|
| Assets           |            |            |            |            |            |
|   Checking       |            |            |            |            |            |
|     USD          |            |   14600.00 |   14600.00 |   14600.00 |   14600.00 |
|   Portfolio      |            |            |            |            |            |
|     AAPL         |            |      10.00 |      10.00 |      10.00 |      10.00 |
|   Wallet         |            |            |            |            |            |
|     BTC          |            |       0.25 |       0.25 |       0.25 |       0.25 |
|------------------+------------+------------+------------+------------+------------|
| Equity           |            |            |            |            |            |
|   Gains          |            |            |            |            |            |
|     AAPL         |            |     -10.00 |     -10.00 |     -10.00 |     -10.00 |
|     BTC          |            |      -0.25 |      -0.25 |      -0.25 |      -0.25 |
|     USD          |            |    5200.00 |    5200.00 |    5200.00 |    5200.00 |
|   OpeningBalance |            |            |            |            |            |
|     USD          |            |  -15000.00 |  -15000.00 |  -15000.00 |  -15000.00 |
|------------------+------------+------------+------------+------------+------------|
| Income           |            |            |            |            |            |
|   Salary         |            |            |            |            |            |
|     USD          |            |  -12000.00 |  -12000.00 |  -12000.00 |  -12000.00 |
|------------------+------------+------------+------------+------------+------------|
| Expenses         |            |            |            |            |            |
|   Books          |            |            |            |            |            |
|     USD          |            |     100.00 |     100.00 |     100.00 |     100.00 |
|   Groceries      |            |            |            |            |            |
|     USD          |            |    1100.00 |    1100.00 |    1100.00 |    1100.00 |
|   Rent           |            |            |            |            |            |
|     USD          |            |    6000.00 |    6000.00 |    6000.00 |    6000.00 |
|------------------+------------+------------+------------+------------+------------|
| Total            |            |            |            |            |            |
|   AAPL           |            |            |            |            |            |
|   BTC            |            |            |            |            |            |
|   USD            |            |            |            |            |            |
|------------------+------------+------------+------------+------------+------------|

#+end_example



*** Balancing options

**** Flattening the account structure

There are some formatting options available:

#+NAME: beans-balance-with-options
#+BEGIN_SRC sh
  beans balance -j examples/example.bean --format flat
#+END_SRC

#+RESULTS: beans-balance-with-options
#+begin_example
|-----------------------+------------+------------|
| Account               | 2018-01-01 | 2018-11-01 |
|-----------------------+------------+------------|
| Assets:Checking       |            |            |
|   USD                 |   15000.00 |   14600.00 |
|-----------------------+------------+------------|
| Assets:Portfolio      |            |            |
|   AAPL                |            |      10.00 |
|-----------------------+------------+------------|
| Assets:Wallet         |            |            |
|   BTC                 |            |       0.25 |
|-----------------------+------------+------------|
| Equity:Gains          |            |            |
|   AAPL                |            |     -10.00 |
|   BTC                 |            |      -0.25 |
|   USD                 |            |    5200.00 |
|-----------------------+------------+------------|
| Equity:OpeningBalance |            |            |
|   USD                 |  -15000.00 |  -15000.00 |
|-----------------------+------------+------------|
| Income:Salary         |            |            |
|   USD                 |            |  -12000.00 |
|-----------------------+------------+------------|
| Expenses:Books        |            |            |
|   USD                 |            |     100.00 |
|-----------------------+------------+------------|
| Expenses:Groceries    |            |            |
|   USD                 |            |    1100.00 |
|-----------------------+------------+------------|
| Expenses:Rent         |            |            |
|   USD                 |            |    6000.00 |
|-----------------------+------------+------------|
| Total                 |            |            |
|   AAPL                |            |            |
|   BTC                 |            |            |
|   USD                 |            |            |
|-----------------------+------------+------------|

#+end_example

**** Valuation at market prices

Valuation at market (i.e. latest available prices) is always an option:

#+NAME: beans-balance-market1
#+BEGIN_SRC sh
  beans balance -j examples/example.bean --val USD
#+END_SRC

#+RESULTS: beans-balance-market1
#+begin_example
|------------------+------------+------------|
| Account          | 2018-01-01 | 2018-11-01 |
|------------------+------------+------------|
| Assets           |            |            |
|   Checking       |   15000.00 |   14600.00 |
|   Portfolio      |            |    2220.00 |
|   Wallet         |            |    1589.50 |
|------------------+------------+------------|
| Equity           |            |            |
|   Equity         |            |    1233.50 |
|   Gains          |            |     157.00 |
|   OpeningBalance |  -15000.00 |  -15000.00 |
|------------------+------------+------------|
| Income           |            |            |
|   Salary         |            |  -12000.00 |
|------------------+------------+------------|
| Expenses         |            |            |
|   Books          |            |     100.00 |
|   Groceries      |            |    1100.00 |
|   Rent           |            |    6000.00 |
|------------------+------------+------------|
| Total            |            |            |
|------------------+------------+------------|

#+end_example

**** Restricting dates and periods

We can also analyze changes in the balance between specific dates:

#+BEGIN_SRC sh
  beans balance -j examples/example.bean --val USD --from 2018-06-30 --to 2018-10-30
#+END_SRC

#+RESULTS:
#+begin_example
|------------------+------------+------------|
| Account          | 2018-06-30 | 2018-10-30 |
|------------------+------------+------------|
| Assets           |            |            |
|   Checking       |   14600.00 |   14600.00 |
|   Portfolio      |    1900.00 |    2250.00 |
|   Wallet         |    1879.50 |    1644.50 |
|------------------+------------+------------|
| Equity           |            |            |
|   Equity         |    1263.50 |    1148.50 |
|   Gains          |     157.00 |     157.00 |
|   OpeningBalance |  -15000.00 |  -15000.00 |
|------------------+------------+------------|
| Income           |            |            |
|   Salary         |  -12000.00 |  -12000.00 |
|------------------+------------+------------|
| Expenses         |            |            |
|   Books          |     100.00 |     100.00 |
|   Groceries      |    1100.00 |    1100.00 |
|   Rent           |    6000.00 |    6000.00 |
|------------------+------------+------------|
| Total            |            |            |
|------------------+------------+------------|

#+end_example

**** Analyzing changes in valuation

Using filtering, we can eliminate the effect of income and expenses
and track valuation changes over the entire period:

#+BEGIN_SRC sh
  beans balance -j examples/example.bean --account-filter Equity --val USD
#+END_SRC

#+RESULTS:
#+begin_example
|------------------+------------+------------|
| Account          | 2018-01-01 | 2018-11-01 |
|------------------+------------+------------|
| Assets           |            |            |
|   Checking       |   15000.00 |    9800.00 |
|   Portfolio      |            |    2220.00 |
|   Wallet         |            |    1589.50 |
|------------------+------------+------------|
| Equity           |            |            |
|   Equity         |            |    1233.50 |
|   Gains          |            |     157.00 |
|   OpeningBalance |  -15000.00 |  -15000.00 |
|------------------+------------+------------|
| Total            |            |            |
|------------------+------------+------------|

#+end_example

How about bitcoin?

#+NAME: beans-balance-market-2
#+BEGIN_SRC sh
  beans balance -j examples/example.bean --val BTC
#+END_SRC

#+RESULTS: beans-balance-market-2
#+begin_example
|------------------+------------+------------|
| Account          | 2018-01-01 | 2018-11-01 |
|------------------+------------+------------|
| Assets           |            |            |
|   Checking       |       1.12 |       2.30 |
|   Portfolio      |            |       0.35 |
|   Wallet         |            |       0.25 |
|------------------+------------+------------|
| Equity           |            |            |
|   Equity         |            |      -1.34 |
|   Gains          |            |       0.01 |
|   OpeningBalance |      -1.12 |      -1.12 |
|------------------+------------+------------|
| Income           |            |            |
|   Salary         |            |      -1.11 |
|------------------+------------+------------|
| Expenses         |            |            |
|   Books          |            |       0.01 |
|   Groceries      |            |       0.09 |
|   Rent           |            |       0.55 |
|------------------+------------+------------|
| Total            |       0.00 |       0.00 |
|------------------+------------+------------|

#+end_example

~beans~ derives arbitrary commodity conversions between all
commodities, as long as there is at least one path (possibly over
several links) from one commodity to another. For example, conversion
from SomeStock in CHF is possible when prices of SomeStock in USD and
CHF in USD is available. Inverted rates are derived automatically.

At the moment, beans offers either no valuation or valuation at market
prices. Valuation at cost is yet to be implemented.

** Transaction-level valuation

beans applies valuation at the level of transactions, which seems
unique amongst plain-text accounting tools. In the examples above, if
a conversion to a common commodity is desired, beans will:

- convert all bookings over the entire ledger to that commodity at
  market value (given by the transitive & reflexive closure of price
  directives at the transaction date),

- insert valuation bookings for the accumulated positions of all asset
  and liability accounts whenever prices change. These adjustment are
  balanced against an Equity:Valuation account, which is hard-coded
  for the moment.

Every difference in value of an account over a period is explicitly
modeled by corresponding valuation transactions. This greatly
facilitates introspection and analysis, as every unit of the valuation
commodity can be accounted for explicitly.


* Developing beans

Development is very much in progress and beans is not really stable
yet. It seems though that the basic pipeline (importing -
categorizing - balancing) is there, and I am using it to balance my
own journal. beans development is at the moment entirely driven by my
own needs. It has also been a playground for experiments and lots of
refactoring for fun with Haskell.

Use beans at your own risk - at the moment, it is certainly
advantageous if you know some Haskell.

** Roadmap

~beans~ still has long way to go. I do this in my spare time and I do
not have an explicit road map, but here are some ideas I'd like to be
working on in the future:

*** Shorter term
- [X] new command to print and filter transactions (as-is or at market value)
- [ ] provide a more realistic example file
- [X] multi-period reports (yearly, monthly, weekly, daily, ...)
- [ ] colored output
- [ ] friendlier command line
- [ ] more importers (I'll do those that I need personally, but I am
  happy to receive contributions if they are provided with a sample
  file / test)
- [X] export to other tools (beancount / +hledger+ / +ledger+)

*** Longer term
- [ ] general reporting infrastructure
- [ ] more reports (income statement, cash flow statement)
- [ ] plotting / graphs
- [ ] portfolio performance calculation
- [ ] more UI options (web, terminal)

** Documentation

This manual aims to provide a comprehensive overview of its
functionality. It is written in [[https://orgmode.org][org-mode]], please file a pull request
against [[https://github.com/sboehler/beans/blob/master/index.org][this file]] if you want to contribute.

** Dev setup

*** nix / Haskell IDE engine

I am using Emacs and [[https://github.com/digital-asset/ghcide][ghcide]] under [[https://nixos.org/][Nixos]]. To setup your
development environment and install all dependencies, simply run

#+BEGIN_EXAMPLE sh
  nix-shell
#+END_EXAMPLE

if you have the nix package manager installed.

*** Stack

It should be possible to develop ~beans~ with stack. Please file a bug
report / pull request if you discover anything that does not work as
expected.

** Adding an importer

~beans~ is open to contributions, see the example [[https://github.com/sboehler/beans/blob/master/src/Beans/Import/CH/Postfinance.hs][here]] how an importer
can be implemented. The directory should match the country of the
bank. Make a pull request if you want to have it included in beans
(preferrably with a test case and an anonymized sample file).

It is still an open question whether importers should be included in
the ~beans~ repository or whether a more modular system should be
adopted. I am open to suggestion.

** Tests

Every importer should have a test and an example file. This being
said, test coverage is currently lacking for the existing importers.


* License

~beans~ is licensed under the BSD-3 license.
